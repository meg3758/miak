# Generated from C:/Users/fuska/PycharmProjects/miak2/pseudocode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,206,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
        1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
        17,1,18,1,18,1,18,1,18,1,19,1,19,5,19,135,8,19,10,19,12,19,138,9,
        19,1,20,3,20,141,8,20,1,20,4,20,144,8,20,11,20,12,20,145,1,21,1,
        21,1,22,1,22,4,22,152,8,22,11,22,12,22,153,1,22,1,22,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,3,23,166,8,23,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,
        26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,195,8,27,1,
        28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,0,0,31,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,1,0,7,5,0,37,37,42,43,45,45,47,47,
        94,94,3,0,9,10,13,13,32,32,2,0,65,90,97,122,4,0,48,57,65,90,95,95,
        97,122,1,0,48,57,6,0,9,10,13,13,32,32,48,57,65,90,97,122,2,0,60,
        60,62,62,214,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,66,1,0,0,0,5,72,1,0,0,0,7,76,
        1,0,0,0,9,81,1,0,0,0,11,84,1,0,0,0,13,87,1,0,0,0,15,94,1,0,0,0,17,
        99,1,0,0,0,19,103,1,0,0,0,21,112,1,0,0,0,23,114,1,0,0,0,25,116,1,
        0,0,0,27,118,1,0,0,0,29,120,1,0,0,0,31,122,1,0,0,0,33,124,1,0,0,
        0,35,126,1,0,0,0,37,128,1,0,0,0,39,132,1,0,0,0,41,140,1,0,0,0,43,
        147,1,0,0,0,45,149,1,0,0,0,47,165,1,0,0,0,49,167,1,0,0,0,51,177,
        1,0,0,0,53,182,1,0,0,0,55,194,1,0,0,0,57,196,1,0,0,0,59,199,1,0,
        0,0,61,203,1,0,0,0,63,64,5,105,0,0,64,65,5,102,0,0,65,2,1,0,0,0,
        66,67,5,119,0,0,67,68,5,104,0,0,68,69,5,105,0,0,69,70,5,108,0,0,
        70,71,5,101,0,0,71,4,1,0,0,0,72,73,5,102,0,0,73,74,5,111,0,0,74,
        75,5,114,0,0,75,6,1,0,0,0,76,77,5,101,0,0,77,78,5,108,0,0,78,79,
        5,115,0,0,79,80,5,101,0,0,80,8,1,0,0,0,81,82,5,58,0,0,82,83,5,61,
        0,0,83,10,1,0,0,0,84,85,5,105,0,0,85,86,5,115,0,0,86,12,1,0,0,0,
        87,88,5,114,0,0,88,89,5,101,0,0,89,90,5,116,0,0,90,91,5,117,0,0,
        91,92,5,114,0,0,92,93,5,110,0,0,93,14,1,0,0,0,94,95,5,115,0,0,95,
        96,5,107,0,0,96,97,5,105,0,0,97,98,5,112,0,0,98,16,1,0,0,0,99,100,
        5,110,0,0,100,101,5,111,0,0,101,102,5,116,0,0,102,18,1,0,0,0,103,
        104,5,102,0,0,104,105,5,117,0,0,105,106,5,110,0,0,106,107,5,99,0,
        0,107,108,5,116,0,0,108,109,5,105,0,0,109,110,5,111,0,0,110,111,
        5,110,0,0,111,20,1,0,0,0,112,113,5,123,0,0,113,22,1,0,0,0,114,115,
        5,125,0,0,115,24,1,0,0,0,116,117,5,40,0,0,117,26,1,0,0,0,118,119,
        5,41,0,0,119,28,1,0,0,0,120,121,5,91,0,0,121,30,1,0,0,0,122,123,
        5,93,0,0,123,32,1,0,0,0,124,125,7,0,0,0,125,34,1,0,0,0,126,127,5,
        44,0,0,127,36,1,0,0,0,128,129,7,1,0,0,129,130,1,0,0,0,130,131,6,
        18,0,0,131,38,1,0,0,0,132,136,7,2,0,0,133,135,7,3,0,0,134,133,1,
        0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,40,1,0,
        0,0,138,136,1,0,0,0,139,141,5,45,0,0,140,139,1,0,0,0,140,141,1,0,
        0,0,141,143,1,0,0,0,142,144,7,4,0,0,143,142,1,0,0,0,144,145,1,0,
        0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,42,1,0,0,0,147,148,5,59,
        0,0,148,44,1,0,0,0,149,151,5,34,0,0,150,152,7,5,0,0,151,150,1,0,
        0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,155,1,0,
        0,0,155,156,5,34,0,0,156,46,1,0,0,0,157,166,5,61,0,0,158,159,5,62,
        0,0,159,166,5,61,0,0,160,161,5,60,0,0,161,166,5,61,0,0,162,166,7,
        6,0,0,163,164,5,33,0,0,164,166,5,61,0,0,165,157,1,0,0,0,165,158,
        1,0,0,0,165,160,1,0,0,0,165,162,1,0,0,0,165,163,1,0,0,0,166,48,1,
        0,0,0,167,168,5,100,0,0,168,169,5,105,0,0,169,170,5,118,0,0,170,
        171,5,105,0,0,171,172,5,115,0,0,172,173,5,105,0,0,173,174,5,98,0,
        0,174,175,5,108,0,0,175,176,5,101,0,0,176,50,1,0,0,0,177,178,5,102,
        0,0,178,179,5,114,0,0,179,180,5,111,0,0,180,181,5,109,0,0,181,52,
        1,0,0,0,182,183,5,116,0,0,183,184,5,111,0,0,184,54,1,0,0,0,185,186,
        5,116,0,0,186,187,5,114,0,0,187,188,5,117,0,0,188,195,5,101,0,0,
        189,190,5,102,0,0,190,191,5,97,0,0,191,192,5,108,0,0,192,193,5,115,
        0,0,193,195,5,101,0,0,194,185,1,0,0,0,194,189,1,0,0,0,195,56,1,0,
        0,0,196,197,5,98,0,0,197,198,5,121,0,0,198,58,1,0,0,0,199,200,5,
        97,0,0,200,201,5,110,0,0,201,202,5,100,0,0,202,60,1,0,0,0,203,204,
        5,111,0,0,204,205,5,114,0,0,205,62,1,0,0,0,8,0,134,136,140,145,153,
        165,194,1,6,0,0
    ]

class pseudocodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    WHILE = 2
    FOR = 3
    ELSE = 4
    ASSIGN = 5
    IS = 6
    RETURN = 7
    SKIP_TOKEN = 8
    NOT = 9
    FUNCTION = 10
    C_BRACKET_OPEN = 11
    C_BRACKET_CLOSE = 12
    R_BRACKET_OPEN = 13
    R_BRACKET_CLOSE = 14
    S_BRACKET_OPEN = 15
    S_BRACKET_CLOSE = 16
    MATH_SYM = 17
    COMMA = 18
    WHITESPACE = 19
    ID = 20
    NUMBER = 21
    SEMICOLON = 22
    STRING = 23
    COMPARE_SYM = 24
    DIVISIBLE = 25
    FROM = 26
    TO = 27
    BOOL = 28
    BY = 29
    AND = 30
    OR = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'while'", "'for'", "'else'", "':='", "'is'", "'return'", 
            "'skip'", "'not'", "'function'", "'{'", "'}'", "'('", "')'", 
            "'['", "']'", "','", "';'", "'divisible'", "'from'", "'to'", 
            "'by'", "'and'", "'or'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "WHILE", "FOR", "ELSE", "ASSIGN", "IS", "RETURN", "SKIP_TOKEN", 
            "NOT", "FUNCTION", "C_BRACKET_OPEN", "C_BRACKET_CLOSE", "R_BRACKET_OPEN", 
            "R_BRACKET_CLOSE", "S_BRACKET_OPEN", "S_BRACKET_CLOSE", "MATH_SYM", 
            "COMMA", "WHITESPACE", "ID", "NUMBER", "SEMICOLON", "STRING", 
            "COMPARE_SYM", "DIVISIBLE", "FROM", "TO", "BOOL", "BY", "AND", 
            "OR" ]

    ruleNames = [ "IF", "WHILE", "FOR", "ELSE", "ASSIGN", "IS", "RETURN", 
                  "SKIP_TOKEN", "NOT", "FUNCTION", "C_BRACKET_OPEN", "C_BRACKET_CLOSE", 
                  "R_BRACKET_OPEN", "R_BRACKET_CLOSE", "S_BRACKET_OPEN", 
                  "S_BRACKET_CLOSE", "MATH_SYM", "COMMA", "WHITESPACE", 
                  "ID", "NUMBER", "SEMICOLON", "STRING", "COMPARE_SYM", 
                  "DIVISIBLE", "FROM", "TO", "BOOL", "BY", "AND", "OR" ]

    grammarFileName = "pseudocode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


